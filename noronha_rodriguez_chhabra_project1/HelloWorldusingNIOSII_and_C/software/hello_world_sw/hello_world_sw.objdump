
hello_world_sw.elf:     file format elf32-littlenios2
hello_world_sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00000244 memsz 0x00000244 flags r-x
    LOAD off    0x00001264 vaddr 0x00004264 paddr 0x00004268 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x0000126c vaddr 0x0000426c paddr 0x0000426c align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00004020  00004020  00001268  2**0
                  CONTENTS
  2 .text         0000022c  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  0000424c  0000424c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  00004264  00004268  00001264  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  0000426c  0000426c  0000126c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00004278  00004278  00001268  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000168  00000000  00000000  00001290  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000b51  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000657  00000000  00000000  00001f49  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000755  00000000  00000000  000025a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000190  00000000  00000000  00002cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000005c7  00000000  00000000  00002e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000101  00000000  00000000  0000344f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00003550  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000088  00000000  00000000  00003560  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00004356  2**0
                  CONTENTS, READONLY
 18 .cpu          00000006  00000000  00000000  00004359  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000435f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00004360  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00004361  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00004365  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  00004369  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000d  00000000  00000000  0000436d  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000028  00000000  00000000  0000437a  2**0
                  CONTENTS, READONLY
 26 .jdi          00003e98  00000000  00000000  000043a2  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00037b7a  00000000  00000000  0000823a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004020 l    d  .text	00000000 .text
0000424c l    d  .rodata	00000000 .rodata
00004264 l    d  .rwdata	00000000 .rwdata
0000426c l    d  .bss	00000000 .bss
00004278 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_sw_bsp//obj/HAL/src/crt0.o
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00004164 g     F .text	0000002c alt_main
00004268 g       *ABS*	00000000 __flash_rwdata_start
00004190 g     F .text	00000038 alt_putstr
00004228 g     F .text	00000008 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
00004270 g     O .bss	00000004 alt_argv
0000c264 g       *ABS*	00000000 _gp
00004278 g       *ABS*	00000000 __bss_end
00004220 g     F .text	00000004 alt_dcache_flush_all
00004268 g       *ABS*	00000000 __ram_rwdata_end
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory
00004264 g       *ABS*	00000000 __ram_rodata_end
00004278 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
000041ec g     F .text	00000034 altera_avalon_jtag_uart_write
00004020 g     F .text	0000003c _start
000041e8 g     F .text	00000004 alt_sys_init
00004264 g       *ABS*	00000000 __ram_rwdata_start
0000424c g       *ABS*	00000000 __ram_rodata_start
00004278 g       *ABS*	00000000 __alt_stack_base
0000426c g       *ABS*	00000000 __bss_start
0000405c g     F .text	00000028 main
0000426c g     O .bss	00000004 alt_envp
0000424c g       *ABS*	00000000 __flash_rodata_start
000041c8 g     F .text	00000020 alt_irq_init
00004274 g     O .bss	00000004 alt_argc
00004020 g       *ABS*	00000000 __ram_exceptions_start
00004268 g       *ABS*	00000000 _edata
00004278 g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
00008000 g       *ABS*	00000000 __alt_data_end
00004264 g     O .rwdata	00000004 uart
0000400c g       .entry	00000000 _exit
00004230 g     F .text	0000001c strlen
00004224 g     F .text	00000004 alt_icache_flush_all
00004084 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08500814 	ori	at,at,16416
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .text:

00004020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4024:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    4028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    402c:	d6b09914 	ori	gp,gp,49764
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4034:	10909b14 	ori	r2,r2,17004

    movhi r3, %hi(__bss_end)
    4038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    403c:	18d09e14 	ori	r3,r3,17016

    beq r2, r3, 1f
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>

0:
    stw zero, (r2)
    4044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    404c:	10fffd36 	bltu	r2,r3,4044 <_gp+0xffff7de0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4050:	00040840 	call	4084 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4054:	00041640 	call	4164 <alt_main>

00004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4058:	003fff06 	br	4058 <_gp+0xffff7df4>

0000405c <main>:
#include <sys/alt_stdio.h>
#include <stdio.h>
#include "altera_avalon_pio_regs.h"
#include "system.h"
int main() {
	int switch_datain; alt_putstr("Hello from Nios II!\n");
    405c:	01000034 	movhi	r4,0

#include <sys/alt_stdio.h>
#include <stdio.h>
#include "altera_avalon_pio_regs.h"
#include "system.h"
int main() {
    4060:	deffff04 	addi	sp,sp,-4
	int switch_datain; alt_putstr("Hello from Nios II!\n");
    4064:	21109304 	addi	r4,r4,16972

#include <sys/alt_stdio.h>
#include <stdio.h>
#include "altera_avalon_pio_regs.h"
#include "system.h"
int main() {
    4068:	dfc00015 	stw	ra,0(sp)
	int switch_datain; alt_putstr("Hello from Nios II!\n");
    406c:	00041900 	call	4190 <alt_putstr>
/* Event loop never exits. Read the PB, display on the LED */
	while (1){
		switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
    4070:	01240414 	movui	r4,36880
		IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,switch_datain);
    4074:	00a40014 	movui	r2,36864
#include "system.h"
int main() {
	int switch_datain; alt_putstr("Hello from Nios II!\n");
/* Event loop never exits. Read the PB, display on the LED */
	while (1){
		switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
    4078:	20c00037 	ldwio	r3,0(r4)
		IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,switch_datain);
    407c:	10c00035 	stwio	r3,0(r2)
    4080:	003ffd06 	br	4078 <_gp+0xffff7e14>

00004084 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4084:	deffff04 	addi	sp,sp,-4
    4088:	01000034 	movhi	r4,0
    408c:	01400034 	movhi	r5,0
    4090:	dfc00015 	stw	ra,0(sp)
    4094:	21109904 	addi	r4,r4,16996
    4098:	29509a04 	addi	r5,r5,17000

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    409c:	2140061e 	bne	r4,r5,40b8 <alt_load+0x34>
    40a0:	01000034 	movhi	r4,0
    40a4:	01400034 	movhi	r5,0
    40a8:	21100804 	addi	r4,r4,16416
    40ac:	29500804 	addi	r5,r5,16416
    40b0:	2140121e 	bne	r4,r5,40fc <alt_load+0x78>
    40b4:	00000b06 	br	40e4 <alt_load+0x60>
    40b8:	00c00034 	movhi	r3,0
    40bc:	18d09a04 	addi	r3,r3,17000
    40c0:	1907c83a 	sub	r3,r3,r4
    40c4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    40c8:	10fff526 	beq	r2,r3,40a0 <_gp+0xffff7e3c>
    {
      *to++ = *from++;
    40cc:	114f883a 	add	r7,r2,r5
    40d0:	39c00017 	ldw	r7,0(r7)
    40d4:	110d883a 	add	r6,r2,r4
    40d8:	10800104 	addi	r2,r2,4
    40dc:	31c00015 	stw	r7,0(r6)
    40e0:	003ff906 	br	40c8 <_gp+0xffff7e64>
    40e4:	01000034 	movhi	r4,0
    40e8:	01400034 	movhi	r5,0
    40ec:	21109304 	addi	r4,r4,16972
    40f0:	29509304 	addi	r5,r5,16972

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    40f4:	2140101e 	bne	r4,r5,4138 <alt_load+0xb4>
    40f8:	00000b06 	br	4128 <alt_load+0xa4>
    40fc:	00c00034 	movhi	r3,0
    4100:	18d00804 	addi	r3,r3,16416
    4104:	1907c83a 	sub	r3,r3,r4
    4108:	0005883a 	mov	r2,zero
  {
    while( to != end )
    410c:	10fff526 	beq	r2,r3,40e4 <_gp+0xffff7e80>
    {
      *to++ = *from++;
    4110:	114f883a 	add	r7,r2,r5
    4114:	39c00017 	ldw	r7,0(r7)
    4118:	110d883a 	add	r6,r2,r4
    411c:	10800104 	addi	r2,r2,4
    4120:	31c00015 	stw	r7,0(r6)
    4124:	003ff906 	br	410c <_gp+0xffff7ea8>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    4128:	00042200 	call	4220 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    412c:	dfc00017 	ldw	ra,0(sp)
    4130:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    4134:	00042241 	jmpi	4224 <alt_icache_flush_all>
    4138:	00c00034 	movhi	r3,0
    413c:	18d09904 	addi	r3,r3,16996
    4140:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4144:	0005883a 	mov	r2,zero
  {
    while( to != end )
    4148:	18bff726 	beq	r3,r2,4128 <_gp+0xffff7ec4>
    {
      *to++ = *from++;
    414c:	114f883a 	add	r7,r2,r5
    4150:	39c00017 	ldw	r7,0(r7)
    4154:	110d883a 	add	r6,r2,r4
    4158:	10800104 	addi	r2,r2,4
    415c:	31c00015 	stw	r7,0(r6)
    4160:	003ff906 	br	4148 <_gp+0xffff7ee4>

00004164 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4164:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4168:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    416c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4170:	00041c80 	call	41c8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4174:	00041e80 	call	41e8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    4178:	d1a00217 	ldw	r6,-32760(gp)
    417c:	d1600317 	ldw	r5,-32756(gp)
    4180:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    4184:	dfc00017 	ldw	ra,0(sp)
    4188:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    418c:	000405c1 	jmpi	405c <main>

00004190 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    4190:	defffe04 	addi	sp,sp,-8
    4194:	dc000015 	stw	r16,0(sp)
    4198:	dfc00115 	stw	ra,4(sp)
    419c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    41a0:	00042300 	call	4230 <strlen>
    41a4:	01000034 	movhi	r4,0
    41a8:	000f883a 	mov	r7,zero
    41ac:	100d883a 	mov	r6,r2
    41b0:	800b883a 	mov	r5,r16
    41b4:	21109904 	addi	r4,r4,16996
#else
    return fputs(str, stdout);
#endif
#endif
}
    41b8:	dfc00117 	ldw	ra,4(sp)
    41bc:	dc000017 	ldw	r16,0(sp)
    41c0:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    41c4:	00041ec1 	jmpi	41ec <altera_avalon_jtag_uart_write>

000041c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    41c8:	deffff04 	addi	sp,sp,-4
    41cc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2E, nios2e);
    41d0:	00042280 	call	4228 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    41d4:	00800044 	movi	r2,1
    41d8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    41dc:	dfc00017 	ldw	ra,0(sp)
    41e0:	dec00104 	addi	sp,sp,4
    41e4:	f800283a 	ret

000041e8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    41e8:	f800283a 	ret

000041ec <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    41ec:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    41f0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    41f4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    41f8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    41fc:	2980072e 	bgeu	r5,r6,421c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    4200:	38c00037 	ldwio	r3,0(r7)
    4204:	18ffffec 	andhi	r3,r3,65535
    4208:	183ffc26 	beq	r3,zero,41fc <_gp+0xffff7f98>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    420c:	28c00007 	ldb	r3,0(r5)
    4210:	20c00035 	stwio	r3,0(r4)
    4214:	29400044 	addi	r5,r5,1
    4218:	003ff806 	br	41fc <_gp+0xffff7f98>

  return count;
}
    421c:	f800283a 	ret

00004220 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    4220:	f800283a 	ret

00004224 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    4224:	f800283a 	ret

00004228 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    4228:	000170fa 	wrctl	ienable,zero
    422c:	f800283a 	ret

00004230 <strlen>:
    4230:	2005883a 	mov	r2,r4
    4234:	10c00007 	ldb	r3,0(r2)
    4238:	18000226 	beq	r3,zero,4244 <strlen+0x14>
    423c:	10800044 	addi	r2,r2,1
    4240:	003ffc06 	br	4234 <_gp+0xffff7fd0>
    4244:	1105c83a 	sub	r2,r2,r4
    4248:	f800283a 	ret
