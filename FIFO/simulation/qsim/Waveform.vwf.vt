// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/19/2017 18:37:41"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          HWSetEQ1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module HWSetEQ1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [8:0] DataIn;
reg RdPtrClr;
reg WrPtrClr;
reg clk;
reg rden;
reg rdinc;
reg wden;
reg wrinc;
// wires                                               
wire [8:0] DataOut;

// assign statements (if any)                          
HWSetEQ1 i1 (
// port map - connection between master ports and signals/registers   
	.DataIn(DataIn),
	.DataOut(DataOut),
	.RdPtrClr(RdPtrClr),
	.WrPtrClr(WrPtrClr),
	.clk(clk),
	.rden(rden),
	.rdinc(rdinc),
	.wden(wden),
	.wrinc(wrinc)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// DataIn[ 8 ]
initial
begin
	DataIn[8] = 1'b0;
end 
// DataIn[ 7 ]
initial
begin
	DataIn[7] = 1'b0;
end 
// DataIn[ 6 ]
initial
begin
	DataIn[6] = 1'b0;
	DataIn[6] = #620000 1'b1;
end 
// DataIn[ 5 ]
initial
begin
	DataIn[5] = 1'b0;
	DataIn[5] = #300000 1'b1;
	DataIn[5] = #320000 1'b0;
	DataIn[5] = #320000 1'b1;
end 
// DataIn[ 4 ]
initial
begin
	DataIn[4] = 1'b0;
	# 140000;
	repeat(2)
	begin
		DataIn[4] = 1'b1;
		DataIn[4] = #160000 1'b0;
		# 160000;
	end
	DataIn[4] = 1'b1;
	DataIn[4] = #160000 1'b0;
end 
// DataIn[ 3 ]
initial
begin
	DataIn[3] = 1'b0;
	# 60000;
	repeat(5)
	begin
		DataIn[3] = 1'b1;
		DataIn[3] = #80000 1'b0;
		# 80000;
	end
	DataIn[3] = 1'b1;
	DataIn[3] = #80000 1'b0;
end 
// DataIn[ 2 ]
initial
begin
	DataIn[2] = 1'b0;
	# 20000;
	repeat(12)
	begin
		DataIn[2] = 1'b1;
		DataIn[2] = #40000 1'b0;
		# 40000;
	end
	DataIn[2] = 1'b1;
end 
// DataIn[ 1 ]
always
begin
	DataIn[1] = 1'b1;
	DataIn[1] = #20000 1'b0;
	#20000;
end 
// DataIn[ 0 ]
initial
begin
	DataIn[0] = 1'b0;
end 

// wden
initial
begin
	wden = 1'b0;
	wden = #10000 1'b1;
	wden = #10000 1'b0;
	wden = #30000 1'b1;
	wden = #10000 1'b0;
	wden = #120000 1'b1;
	wden = #10000 1'b0;
	wden = #10000 1'b1;
	wden = #10000 1'b0;
	wden = #10000 1'b1;
	wden = #10000 1'b0;
	wden = #120000 1'b1;
	wden = #10000 1'b0;
	wden = #10000 1'b1;
	wden = #10000 1'b0;
	wden = #140000 1'b1;
	wden = #10000 1'b0;
end 

// rden
initial
begin
	rden = 1'b0;
	rden = #80000 1'b1;
	rden = #20000 1'b0;
	rden = #40000 1'b1;
	rden = #10000 1'b0;
	rden = #90000 1'b1;
	rden = #10000 1'b0;
	rden = #10000 1'b1;
	rden = #10000 1'b0;
	rden = #10000 1'b1;
	rden = #30000 1'b0;
	rden = #100000 1'b1;
	rden = #70000 1'b0;
	rden = #50000 1'b1;
	rden = #30000 1'b0;
	rden = #70000 1'b1;
	rden = #140000 1'b0;
end 

// WrPtrClr
initial
begin
	WrPtrClr = 1'b0;
	WrPtrClr = #110000 1'b1;
	WrPtrClr = #10000 1'b0;
	WrPtrClr = #370000 1'b1;
	WrPtrClr = #10000 1'b0;
end 

// RdPtrClr
initial
begin
	RdPtrClr = 1'b0;
	RdPtrClr = #120000 1'b1;
	RdPtrClr = #10000 1'b0;
	RdPtrClr = #30000 1'b1;
	RdPtrClr = #10000 1'b0;
	RdPtrClr = #100000 1'b1;
	RdPtrClr = #10000 1'b0;
	RdPtrClr = #100000 1'b1;
	RdPtrClr = #10000 1'b0;
	RdPtrClr = #100000 1'b1;
	RdPtrClr = #10000 1'b0;
	RdPtrClr = #80000 1'b1;
	RdPtrClr = #10000 1'b0;
end 

// rdinc
initial
begin
	rdinc = 1'b0;
	rdinc = #250000 1'b1;
	rdinc = #10000 1'b0;
end 

// wrinc
initial
begin
	wrinc = 1'b0;
	wrinc = #320000 1'b1;
	wrinc = #20000 1'b0;
end 
endmodule

